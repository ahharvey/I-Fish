
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Review::BaitLoadingsController, type: :controller do


  # This should return the minimal set of attributes required to create a valid
  # Company. As you add validations to Company, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      review_state:  'pending'
    }
  }

  let(:invalid_attributes) {
    {
      review_state:  'invalid'
    }
  }

  let(:admin)     { create :admin }
  let(:bait_loading1)   { create :bait_loading }


  let(:vessel)             { create :vessel }
  let(:port)             { create :port }
  let(:wpp)             { create :wpp }

  let(:manta)               { create :manta }
  let(:encountered_manta)   { create :encountered_manta }
  let(:encountered_manta2)  { create :encountered_manta }

  let(:identification1)     { create :identification }
  let(:identification2)     { create :identification }
  let(:identification3)     { create :identification }
  let(:identification4)     { create :identification, status: 'approved' }
  let(:identification5)     { create :identification, status: 'rejected' }



  describe "PUT #update" do
    # we will only test with admin
    # other roles are covered by ability_spec
    before :each do
      admin.roles.push Role.where(name: 'administrator').first_or_create
      sign_in admin
    end
    context "with valid params when approved" do
      let(:new_attributes) {
        { review_state: 'approved' }
      }
      before :each do
        put :update, {:id => bait_loading1.to_param, :bait_loading => new_attributes}
      end
      it { expect( assigns(:bait_loading) ).to eq(bait_loading1) }
      it { is_expected.to redirect_to bait_loading_path(bait_loading1) }
      it { expect( assigns(:bait_loading).approved? ).to be true }
      it { expect( assigns(:bait_loading).reviewer_id ).to eq admin.id }
      it { expect( assigns(:bait_loading).reviewed_at.change(:sec => 0) ).to eq Time.now.change(:sec => 0) }
      it { expect( flash[:notice] ).to have_content "Bait Loading approved!" }
      it {
        is_expected.to permit(:review_state).
          for(:update, params: { id: bait_loading1, bait_loading: valid_attributes } ).
          on(:bait_loading)
        }
    end
    context "with valid params when rejected" do
      let(:new_attributes) {
        { review_state: 'rejected' }
      }
      before :each do
        put :update, {:id => bait_loading1.to_param, :bait_loading => new_attributes}
      end
      it { expect( assigns(:bait_loading) ).to eq(bait_loading1) }
      it { is_expected.to redirect_to bait_loading_path(bait_loading1) }
      it { expect( assigns(:bait_loading).rejected? ).to be true }
      it { expect( assigns(:bait_loading).reviewer_id ).to eq admin.id }
      it { expect( assigns(:bait_loading).reviewed_at.change(:sec => 0) ).to eq Time.now.change(:sec => 0) }
      it { expect( flash[:notice] ).to have_content "Bait Loading rejected!" }
    end
    context "with valid params when pending" do
      let(:new_attributes) {
        { review_state: 'pending' }
      }
      before :each do
        put :update, {:id => bait_loading1.to_param, :bait_loading => new_attributes}
      end
      it { expect( assigns(:bait_loading) ).to eq(bait_loading1) }
      it { is_expected.to redirect_to bait_loading_path(bait_loading1) }
      it { expect( assigns(:bait_loading).pending? ).to be true }
      it { expect( assigns(:bait_loading).reviewer_id).to eq nil }
      it { expect( assigns(:bait_loading).reviewed_at ).to eq nil }
      it { expect( flash[:notice] ).to have_content "Bait Loading marked as pending!" }
    end
    context "with invalid params" do
      before :each do
        put :update, {:id => bait_loading1.to_param, :bait_loading => invalid_attributes}
      end
      it { expect( assigns(:bait_loading) ).to eq(bait_loading1) }
      it { is_expected.to render_template "bait_loadings/show" }
      it { expect( flash[:error] ).to have_content "There was a problem saving your bait loading review." }
    end
  end
end
