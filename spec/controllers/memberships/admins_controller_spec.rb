
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Memberships::AdminsController, type: :controller do


  # This should return the minimal set of attributes required to create a valid
  # Company. As you add validations to Company, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      email:  'user@example.com'
    }
  }

  let(:invalid_attributes) {
    {
      email:  nil
    }
  }

  let(:admin)     { create :admin }
  let(:office)     { create :office }
  let!(:admin1)     { create :admin }
  let(:admin2)     { create :admin }


  describe "POST #create" do
    # we will only test with admin
    # other roles are covered by ability_spec
    before :each do
      admin.roles.push Role.where(name: 'administrator').first_or_create
      sign_in admin
    end
    context "with valid and recognized" do
      before :each do
        post :create, { admin: { email: admin1.email } , office_id: office.id}
      end
      it {
        expect {
          post :create, { admin: { email: admin2.email }, office_id: office.id }
        }.to change(office.admins, :count).by(1)
      }
      it { expect(assigns(:object)).to  eq(office) }
      it { expect(assigns(:admin)).to    eq(admin1) }
      it { is_expected.to redirect_to office_path(office) }
      it { expect( flash[:success] ).to have_content "#{admin1.name} was successfully added to #{office.name}." }
    end
    context "with valid and already member" do
      before :each do
        office.admins.push admin1
        post :create, { admin: { email: admin1.email } , office_id: office.id}
      end
      it { expect(assigns(:object)).to  eq(office) }
      it { expect(assigns(:admin)).to    eq(admin1) }
      it { is_expected.to redirect_to office_path(office) }
      it { expect( flash[:notice] ).to have_content "#{admin1.name} is already a member of #{office.name}." }
    end
    context "with valid and unrecognized" do
      before :each do
        post :create, { admin: valid_attributes, office_id: office.id}
      end
      it { expect(assigns(:object)).to eq(office) }
      it { expect(assigns(:admin)).to    be_a(Admin) }
      it { is_expected.to redirect_to office_path(office) }
      it { expect( flash[:alert] ).to have_content "#{valid_attributes[:email]} was successfully invited to #{office.name}." }
    end
    context "with invalid params" do
      before :each do
        post :create, { admin: invalid_attributes, office_id: office.id}
      end
      it { expect( assigns(:object) ).to eq(office) }
      it { expect(assigns(:admin)).to    be nil }
      it { is_expected.to redirect_to office_path(office) }
      it { expect( flash[:error] ).to have_content "We were unable to add the admin to this office." }
    end
  end

  describe "DELETE #destroy"  do

    # we will only test with superadmin
    # other roles are covered by ability_spec
    before :each do
      office.admins.push admin1
      office.admins.push admin2

      admin.roles.push Role.where(name: 'administrator').first_or_create
      sign_in admin
      #require 'pry'; binding.pry
      delete :destroy, {:id => admin1.to_param, office_id: office.id}
    end
    it { expect {
        delete :destroy, {:id => admin2.to_param, office_id: office.id}
      }.to change(office.admins, :count).by(-1) }
    it { is_expected.to redirect_to(office_path(office)) }
    it { expect( flash[:notice] ).to have_content "#{admin1.name} was successfully removed from #{office.name}." }
  end
end
