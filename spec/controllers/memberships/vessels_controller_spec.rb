
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Memberships::VesselsController, type: :controller do


  # This should return the minimal set of attributes required to create a valid
  # Company. As you add validations to Company, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      ap2hi_ref:  'vesselUVI'
    }
  }

  let(:invalid_attributes) {
    {
      ap2hi_ref:  nil
    }
  }

  let(:admin)     { create :admin }
  let(:fishery)     { create :fishery }
  let(:vessel)     { create :vessel }
  let(:vessel2)     { create :vessel }


  describe "POST #create" do
    # we will only test with admin
    # other roles are covered by ability_spec
    before :each do
      admin.roles.push Role.where(name: 'staff').first_or_create
      sign_in admin
    end
    context "with valid and recognized" do
      before :each do
        post :create, { vessel: { ap2hi_ref: vessel.ap2hi_ref } , fishery_id: fishery.id}
      end
      it {
        expect {
          post :create, { vessel: { ap2hi_ref: vessel2.ap2hi_ref }, fishery_id: fishery.id }
        }.to change(fishery.vessels, :count).by(1)
      }
      it { expect(assigns(:object)).to  eq(fishery) }
      it { expect(assigns(:vessel)).to    eq(vessel) }
      it { is_expected.to redirect_to fishery_path(fishery) }
      it { expect( flash[:success] ).to have_content "#{vessel.ap2hi_ref} was successfully added to #{fishery.name}." }
    end
    context "with valid and already member" do
      before :each do
        fishery.vessels.push vessel
        post :create, { vessel: { ap2hi_ref: vessel.ap2hi_ref } , fishery_id: fishery.id}
      end
      it { expect(assigns(:object)).to  eq(fishery) }
      it { expect(assigns(:vessel)).to    eq(vessel) }
      it { is_expected.to redirect_to fishery_path(fishery) }
      it { expect( flash[:notice] ).to have_content "#{vessel.ap2hi_ref} is already a member of #{fishery.name}." }
    end
    context "with valid and unrecognized" do
      before :each do
        post :create, { vessel: valid_attributes , fishery_id: fishery.id}
      end
      it { expect(assigns(:object)).to  eq(fishery) }
      it { expect(assigns(:vessel)).to    be nil }
      it { is_expected.to redirect_to fishery_path(fishery) }
      it { expect( flash[:error] ).to have_content "We were unable to add the vessel to this fishery." }
    end
    context "with invalid params" do
      before :each do
        post :create, { vessel: invalid_attributes , fishery_id: fishery.id}
      end
      it { expect( assigns(:object) ).to eq(fishery) }
      it { expect(assigns(:vessel)).to    be nil }
      it { is_expected.to redirect_to fishery_path(fishery) }
      it { expect( flash[:error] ).to have_content "We were unable to add the vessel to this fishery." }
    end
  end

  describe "DELETE #destroy"  do
    let(:name)  { fishery.name }
    # we will only test with superadmin
    # other roles are covered by ability_spec
    before :each do
      fishery.vessels.push vessel
      fishery.vessels.push vessel2
      admin.roles.push Role.where(name: 'administrator').first_or_create
      sign_in admin
      #require 'pry'; binding.pry
      delete :destroy, {:id => vessel.to_param, fishery_id: fishery.id}
    end
    it { expect {
        delete :destroy, {:id => vessel2.to_param, fishery_id: fishery.id}
      }.to change(fishery.vessels, :count).by(-1) }
    it { is_expected.to redirect_to(fishery_path(fishery)) }
    it { expect( flash[:notice] ).to have_content "#{vessel.ap2hi_ref} was successfully removed from #{name}." }
  end
end
